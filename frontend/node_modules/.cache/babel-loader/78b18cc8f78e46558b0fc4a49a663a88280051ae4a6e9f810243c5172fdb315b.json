{"ast":null,"code":"var _s = $RefreshSig$();\n// WebSocketService.js\n\nimport { Client } from '@stomp/stompjs';\nimport { useAuth } from './AuthContext';\nconst WebSocketService = onMessageCallback => {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const client = new Client({\n    brokerURL: 'ws://localhost:8080/ws',\n    // Your WebSocket endpoint\n    connectHeaders: {\n      Authorization: `Bearer ${token}`\n    },\n    debug: function (str) {\n      console.log(str);\n    },\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000\n  });\n  client.onConnect = () => {\n    console.log('WebSocket connected');\n    const subscription = client.subscribe(`/user/miguel/queue/notifications`, message => {\n      onMessageCallback(JSON.parse(message.body));\n      //console.log('Received message:', JSON.parse(message.body));\n    });\n  };\n\n  client.onDisconnect = () => {\n    console.log('WebSocket disconnected');\n  };\n  client.onStompError = frame => {\n    console.error('WebSocket error:', frame.headers.message);\n  };\n  const connect = () => {\n    client.activate();\n    console.log('client connecting...');\n  };\n  const disconnect = () => {\n    client.deactivate();\n  };\n  const subscribeToClass = className => {\n    if (client.connected) {\n      //const subscription = client.subscribe(`/class/${className}`, (message) => {\n      const subscription = client.subscribe(`/user/queue/notifications`, message => {\n        onMessageCallback(JSON.parse(message.body));\n        console.log('Received message:', JSON.parse(message.body));\n      });\n      return subscription;\n    } else {\n      console.error('WebSocket not connected');\n      return null;\n    }\n  };\n  return {\n    connect,\n    disconnect,\n    subscribeToClass\n  };\n};\n_s(WebSocketService, \"ZpOvj47KCDv4EW5BIUHQHDAsr3M=\", false, function () {\n  return [useAuth];\n});\n_c = WebSocketService;\nexport default WebSocketService;\nvar _c;\n$RefreshReg$(_c, \"WebSocketService\");","map":{"version":3,"names":["Client","useAuth","WebSocketService","onMessageCallback","_s","token","client","brokerURL","connectHeaders","Authorization","debug","str","console","log","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","subscription","subscribe","message","JSON","parse","body","onDisconnect","onStompError","frame","error","headers","connect","activate","disconnect","deactivate","subscribeToClass","className","connected","_c","$RefreshReg$"],"sources":["/home/miguel/Documentos/IES/Projeto1/IES_eDuca/frontend/src/WebSocketService.js"],"sourcesContent":["// WebSocketService.js\n\nimport { Client } from '@stomp/stompjs';\nimport { useAuth } from './AuthContext';\n\n\nconst WebSocketService = (onMessageCallback) => {\n  const { token } = useAuth();\n\n  const client = new Client({\n    brokerURL: 'ws://localhost:8080/ws', // Your WebSocket endpoint\n    connectHeaders: {\n      Authorization: `Bearer ${token}`,\n    },\n    debug: function (str) {\n      console.log(str);\n    },\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000,\n  });\n\n  client.onConnect = () => {\n    console.log('WebSocket connected');\n    const subscription = client.subscribe(`/user/miguel/queue/notifications`, (message) => {\n      onMessageCallback(JSON.parse(message.body));\n      //console.log('Received message:', JSON.parse(message.body));\n    });\n  };\n\n  client.onDisconnect = () => {\n    console.log('WebSocket disconnected');\n  };\n\n  client.onStompError = (frame) => {\n    console.error('WebSocket error:', frame.headers.message);\n  };\n\n  const connect = () => {\n    client.activate();\n    console.log('client connecting...');\n  };\n\n  const disconnect = () => {\n    client.deactivate();\n  };\n\n  const subscribeToClass = (className) => {\n    if (client.connected) {\n      //const subscription = client.subscribe(`/class/${className}`, (message) => {\n      const subscription = client.subscribe(`/user/queue/notifications`, (message) => {\n        onMessageCallback(JSON.parse(message.body));\n        console.log('Received message:', JSON.parse(message.body));\n      });\n\n      return subscription;\n    } else {\n      console.error('WebSocket not connected');\n      return null;\n    }\n  };\n\n  return { connect, disconnect, subscribeToClass };\n};\n\nexport default WebSocketService;\n"],"mappings":";AAAA;;AAEA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,SAASC,OAAO,QAAQ,eAAe;AAGvC,MAAMC,gBAAgB,GAAIC,iBAAiB,IAAK;EAAAC,EAAA;EAC9C,MAAM;IAAEC;EAAM,CAAC,GAAGJ,OAAO,CAAC,CAAC;EAE3B,MAAMK,MAAM,GAAG,IAAIN,MAAM,CAAC;IACxBO,SAAS,EAAE,wBAAwB;IAAE;IACrCC,cAAc,EAAE;MACdC,aAAa,EAAG,UAASJ,KAAM;IACjC,CAAC;IACDK,KAAK,EAAE,SAAAA,CAAUC,GAAG,EAAE;MACpBC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC;IACDG,cAAc,EAAE,IAAI;IACpBC,iBAAiB,EAAE,IAAI;IACvBC,iBAAiB,EAAE;EACrB,CAAC,CAAC;EAEFV,MAAM,CAACW,SAAS,GAAG,MAAM;IACvBL,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,MAAMK,YAAY,GAAGZ,MAAM,CAACa,SAAS,CAAE,kCAAiC,EAAGC,OAAO,IAAK;MACrFjB,iBAAiB,CAACkB,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC;MAC3C;IACF,CAAC,CAAC;EACJ,CAAC;;EAEDjB,MAAM,CAACkB,YAAY,GAAG,MAAM;IAC1BZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC,CAAC;EAEDP,MAAM,CAACmB,YAAY,GAAIC,KAAK,IAAK;IAC/Bd,OAAO,CAACe,KAAK,CAAC,kBAAkB,EAAED,KAAK,CAACE,OAAO,CAACR,OAAO,CAAC;EAC1D,CAAC;EAED,MAAMS,OAAO,GAAGA,CAAA,KAAM;IACpBvB,MAAM,CAACwB,QAAQ,CAAC,CAAC;IACjBlB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EACrC,CAAC;EAED,MAAMkB,UAAU,GAAGA,CAAA,KAAM;IACvBzB,MAAM,CAAC0B,UAAU,CAAC,CAAC;EACrB,CAAC;EAED,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACtC,IAAI5B,MAAM,CAAC6B,SAAS,EAAE;MACpB;MACA,MAAMjB,YAAY,GAAGZ,MAAM,CAACa,SAAS,CAAE,2BAA0B,EAAGC,OAAO,IAAK;QAC9EjB,iBAAiB,CAACkB,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC;QAC3CX,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEQ,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC;MAC5D,CAAC,CAAC;MAEF,OAAOL,YAAY;IACrB,CAAC,MAAM;MACLN,OAAO,CAACe,KAAK,CAAC,yBAAyB,CAAC;MACxC,OAAO,IAAI;IACb;EACF,CAAC;EAED,OAAO;IAAEE,OAAO;IAAEE,UAAU;IAAEE;EAAiB,CAAC;AAClD,CAAC;AAAC7B,EAAA,CAzDIF,gBAAgB;EAAA,QACFD,OAAO;AAAA;AAAAmC,EAAA,GADrBlC,gBAAgB;AA2DtB,eAAeA,gBAAgB;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}